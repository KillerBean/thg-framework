# -*- coding: binary -*-
#require 'rex/proto/dcerpc/svcctl'
#require 'windows_error'
#require 'windows_error/win32'
#require 'msf/core/exploit/exe'
#require 'msf/core/exploit/wbemexec'
#nclude WindowsError::Win32
#module Msf
####
# Allows for reuse of the psexec code execution technique
#
# This code was stolen straight out of the psexec module. Thanks very
# much for all who contributed to that module!! Instead of uploading
# and running a binary.
####

#module Exploit::Remote::SMB::Client::Psexec
#include Msf::Exploit::Windows_Constants
#include Msf::Exploit::Remote::DCERPC
#include Msf::Exploit::Remote::SMB::Client::Authenticated
#include Msf::Exploit::Failure
#
# This mixin implements the pipe_auditor module's primary functionality
#
#module Msf
#module Exploit::Remote::SMB::Client::PipeAuditor
#include Msf::Exploit::Remote::SMB::Client
from data import wordlists

#module Msf
# Mixin for handling options related to local files in SMB modules
#module Exploit::Remote::SMB::Client::LocalPaths
#module Msf


from lib.thg.base.BaseOptions import BaseOption
from lib.thg.base.BaseOptions import BaseOptions
from lib.thg.base.BaseResult import BaseResult

class BaseAuxiliary_Drdos:
    name = None #nome do auxiliar
    description = None #descricao do auxiliar
    author = [] # nome do autor
    references = []#referenia do exploit
    disclosure_date = None #data de divulgacao
    service_name = None #nome do servico
    service_version = None #versao do servico
    dbinfo = ['name', 'description', 'author', 'references', 'disclosure_date', 'service_name', 'service_version']#info database
    multi_target = False#vvarios alvos
    targets = []#alvo
    target_type = None#tipo de alvo
    options = None #opcoes
    results = None #resultados

    def __init__(self):
        self.multi_target = False
        self.target_type = None
        self.targets = []
        self.options = BaseOptions()
        self.results = BaseResult()

    def get_info(self):
        info = {}
        for field_name in self.dbinfo:
            info[field_name] = getattr(self, field_name)
        return info

    def register_client_dns(self):
      self.register_options([
          BaseOption(name='SERVICE_NAME', required=False, description='The service name' ),
          BaseOption(name='SERVICE_DISPLAY_NAME', required=False, description='The service display name'),
          BaseOption(name='SERVICE_PERSIST', required=False, description='Create an Auto run service and do not remove it.', value=False),
          BaseOption(name='SERVICE_DESCRIPTION', required=False, description="Service description to to be used on target for pretty listing")

      ])

    def thg_update_info(self, info):
        for name in info:
            if name in self.dbinfo:
                setattr(self, name, info[name])

    def register_options(self, option_array):
        for option in option_array:
            self.options.add_option(option)

    def get_missing_options(self):
        def is_missing(option):
            return option.required and option.value in [None, '']

        missing_options = filter(is_missing, self.options.get_options())
        return list(missing_options)
