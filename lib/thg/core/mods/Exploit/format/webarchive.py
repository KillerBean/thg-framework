#
# The WebArchive mixin provides methods for generating a Safari .webarchive file
# that performs a variety of malicious tasks: stealing files, cookies, and silently
# installing extensions from extensions.apple.com.
#
##
#
# This module exposes methods for querying a remote DNS service
#
###


from lib.thg.base.BaseOptions import BaseOption
from lib.thg.base.BaseOptions import BaseOptions
from lib.thg.base.BaseResult import BaseResult

class BaseAuxiliary_Drdos:
    name = None #nome do auxiliar
    description = None #descricao do auxiliar
    author = [] # nome do autor
    references = []#referenia do exploit
    disclosure_date = None #data de divulgacao
    service_name = None #nome do servico
    service_version = None #versao do servico
    dbinfo = ['name', 'description', 'author', 'references', 'disclosure_date', 'service_name', 'service_version']#info database
    multi_target = False#vvarios alvos
    targets = []#alvo
    target_type = None#tipo de alvo
    options = None #opcoes
    results = None #resultados

    def __init__(self):
        self.multi_target = False
        self.target_type = None
        self.targets = []
        self.options = BaseOptions()
        self.results = BaseResult()

    def get_info(self):
        info = {}
        for field_name in self.dbinfo:
            info[field_name] = getattr(self, field_name)
        return info

    def register_client_dns(self):
      self.target_type = "http"
      self.register_options([
        BaseOption(name="URIPATH", required=False, description='The URI to use for this exploit (default is random)'),
        BaseOption(name='FILENAME', required=True, description='The file name', value='thg.webarchive'),
        BaseOption(name='GRABPATH', required=False, description="The URI to receive the UXSS'ed data", value='grab'),
        BaseOption(name='DOWNLOAD_PATH', required=True, description='The path to download the webarchive', value='thg.webarchive'),
        BaseOption(name='FILE_URLS', required=False, description='Additional file:// URLs to steal. $USER will be resolved to the username.',),
        BaseOption(name='STEAL_COOKIES', required=True, description="Enable cookie stealing", value=True),
        BaseOption(name='STEAL_FILES', required=True, description="Enable local file stealing",value=True),
        BaseOption(name='INSTALL_EXTENSION', required=True, description="Silently install a Safari extensions (requires click)",value=False),
        BaseOption(name='EXTENSION_URL', required=False, description="HTTP URL of a Safari extension to install",value="https://data.getadblock.com/safari/AdBlock.safariextz"),
        BaseOption(name='EXTENSION_ID', required=False, description="The ID of the Safari extension to install", value="com.betafish.adblockforsafari-UAMUU4S2D9")
  ])

    def thg_update_info(self, info):
        for name in info:
            if name in self.dbinfo:
                setattr(self, name, info[name])

    def register_options(self, option_array):
        for option in option_array:
            self.options.add_option(option)

    def get_missing_options(self):
        def is_missing(option):
            return option.required and option.value in [None, '']

        missing_options = filter(is_missing, self.options.get_options())
        return list(missing_options)

'''
  def webarchive_xml():
    pass

  def webarchive_header():
    pass
  def webarchive_footer():
    pass

  def wrap_with_doc():
    pass
  def wrap_with_script():
    pass
  def iframes_container_html():
    pass
  def apple_extension_url():
    pass
  def install_extension():
    pass
  def steal_files():
    pass
  def injected_js_helpers():
    pass
  def collect_data_uri():
    pass
  def backend_url():
    pass
  def webarchive_download_url():
    pass
  def message():
    pass
  def urls():
    pass
  def escape_xml():
    pass
  def should_steal_files():
    pass
'''
