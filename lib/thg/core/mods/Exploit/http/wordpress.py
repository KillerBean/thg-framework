'''
module Msf
class Exploit
class Remote
module HTTP
This module provides a way of interacting with wordpress installations
module Wordpress
require msf/core/exploit/http/wordpress/admin
require msf/core/exploit/http/wordpress/base
require msf/core/exploit/http/wordpress/helpers
require msf/core/exploit/http/wordpress/login
require msf/core/exploit/http/wordpress/posts
require msf/core/exploit/http/wordpress/register
require msf/core/exploit/http/wordpress/uris
require msf/core/exploit/http/wordpress/users
require msf/core/exploit/http/wordpress/version
require msf/core/exploit/http/wordpress/xml_rpc
include Msf::Exploit::Remote::HttpClient
include Msf::Exploit::Remote::HTTP::Wordpress::Admin
include Msf::Exploit::Remote::HTTP::Wordpress::Base
include Msf::Exploit::Remote::HTTP::Wordpress::Helpers
include Msf::Exploit::Remote::HTTP::Wordpress::Login
include Msf::Exploit::Remote::HTTP::Wordpress::Register
include Msf::Exploit::Remote::HTTP::Wordpress::Posts
include Msf::Exploit::Remote::HTTP::Wordpress::URIs
include Msf::Exploit::Remote::HTTP::Wordpress::Users
include Msf::Exploit::Remote::HTTP::Wordpress::Version
include Msf::Exploit::Remote::HTTP::Wordpress::XmlRpc
'''

from lib.thg.base.BaseOptions import BaseOption
from lib.thg.base.BaseOptions import BaseOptions
from lib.thg.base.BaseResult import BaseResult

class BaseAuxiliary_Drdos:
    name = None #nome do auxiliar
    description = None #descricao do auxiliar
    author = [] # nome do autor
    references = []#referenia do exploit
    disclosure_date = None #data de divulgacao
    service_name = None #nome do servico
    service_version = None #versao do servico
    dbinfo = ['name', 'description', 'author', 'references', 'disclosure_date', 'service_name', 'service_version']#info database
    multi_target = False#vvarios alvos
    targets = []#alvo
    target_type = None#tipo de alvo
    options = None #opcoes
    results = None #resultados

    def __init__(self):
        self.multi_target = False
        self.target_type = None
        self.targets = []
        self.options = BaseOptions()
        self.results = BaseResult()

    def get_info(self):
        info = {}
        for field_name in self.dbinfo:
            info[field_name] = getattr(self, field_name)
        return info

    def register_client_dns(self):
      self.register_options([
          BaseOption(name='TARGETURI', required=True, description='The base path to the wordpress application', value='/'),
          #], Msf::Exploit::Remote::HTTP::Wordpress
          BaseOption(name='WPCONTENTDIR', required=True, description='The name of the wp-content directory', value='wp-content'),
          BaseOption(name='WPCHECK', required=True, description='Check if the website is a valid WordPress install', value=True),
          #], Msf::Exploit::Remote::HTTP::Wordpress
  ])

    def thg_update_info(self, info):
        for name in info:
            if name in self.dbinfo:
                setattr(self, name, info[name])

    def register_options(self, option_array):
        for option in option_array:
            self.options.add_option(option)

    def get_missing_options(self):
        def is_missing(option):
            return option.required and option.value in [None, '']

        missing_options = filter(is_missing, self.options.get_options())
        return list(missing_options)