# This module provides a way of interacting with JBoss installations
#require 'msf/core/exploit/http/jboss/base'
#require 'msf/core/exploit/http/jboss/bean_shell'
#require 'msf/core/exploit/http/jboss/bean_shell_scripts'
#require 'msf/core/exploit/http/jboss/deployment_file_repository'
#require 'msf/core/exploit/http/jboss/deployment_file_repository_scripts'
#include Msf::Exploit::Remote::HttpClient
#include Msf::Exploit::Remote::HTTP::JBoss::Base
#include Msf::Exploit::Remote::HTTP::JBoss::BeanShell
#include Msf::Exploit::Remote::HTTP::JBoss::BeanShellScripts
#include Msf::Exploit::Remote::HTTP::JBoss::DeploymentFileRepository
#include Msf::Exploit::Remote::HTTP::JBoss::DeploymentFileRepositoryScripts

#module Msf
#module Exploit::Remote::HTTP::Drupal
#include Msf::Exploit::Remote::HttpClien
# Ensure we don't hit a redirect (e.g., /drupal -> /drupal/)
# XXX: Naughty datastore modification instead of send_request_cgi!
#datastore['TARGETURI'] = normalize_uri(datastore['TARGETURI'], '/')

#
# The WebArchive mixin provides methods for generating a Safari .webarchive file
# that performs a variety of malicious tasks: stealing files, cookies, and silently
# installing extensions from extensions.apple.com.
#
##
#
# This module exposes methods for querying a remote DNS service
#
###


from lib.thg.base.BaseOptions import BaseOption
from lib.thg.base.BaseOptions import BaseOptions
from lib.thg.base.BaseResult import BaseResult

class BaseAuxiliary_Drdos:
    name = None #nome do auxiliar
    description = None #descricao do auxiliar
    author = [] # nome do autor
    references = []#referenia do exploit
    disclosure_date = None #data de divulgacao
    service_name = None #nome do servico
    service_version = None #versao do servico
    dbinfo = ['name', 'description', 'author', 'references', 'disclosure_date', 'service_name', 'service_version']#info database
    multi_target = False#vvarios alvos
    targets = []#alvo
    target_type = None#tipo de alvo
    options = None #opcoes
    results = None #resultados

    def __init__(self):
        self.multi_target = False
        self.target_type = None
        self.targets = []
        self.options = BaseOptions()
        self.results = BaseResult()

    def get_info(self):
        info = {}
        for field_name in self.dbinfo:
            info[field_name] = getattr(self, field_name)
        return info

    def register_client_dns(self):
      self.register_options([

          BaseOption(name='VERB', required=True, description='HTTP Method to use (for CVE-2010-0738)', value='POST',),
          #['GET', 'POST', 'HEAD']]
          BaseOption(name='PACKAGE', required=False, description='The package containing the BSHDeployer service')
  ])

    def thg_update_info(self, info):
        for name in info:
            if name in self.dbinfo:
                setattr(self, name, info[name])

    def register_options(self, option_array):
        for option in option_array:
            self.options.add_option(option)

    def get_missing_options(self):
        def is_missing(option):
            return option.required and option.value in [None, '']

        missing_options = filter(is_missing, self.options.get_options())
        return list(missing_options)

