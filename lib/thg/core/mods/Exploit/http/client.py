###
#
# This module provides methods for acting as an HTTP client when
# exploiting an HTTP server.
#
#
# Initializes an exploit module that exploits a vulnerability in an HTTP
# server.
#
###

from lib.thg.base.BaseOptions import BaseOption
from lib.thg.base.BaseOptions import BaseOptions
from lib.thg.base.BaseResult import BaseResult

class BaseAuxiliary_Drdos:
    name = None #nome do auxiliar
    description = None #descricao do auxiliar
    author = [] # nome do autor
    references = []#referenia do exploit
    disclosure_date = None #data de divulgacao
    service_name = None #nome do servico
    service_version = None #versao do servico
    dbinfo = ['name', 'description', 'author', 'references', 'disclosure_date', 'service_name', 'service_version']#info database
    multi_target = False#vvarios alvos
    targets = []#alvo
    target_type = None#tipo de alvo
    options = None #opcoes
    results = None #resultados

    def __init__(self):
        self.multi_target = False
        self.target_type = None
        self.targets = []
        self.options = BaseOptions()
        self.results = BaseResult()

    def get_info(self):
        info = {}
        for field_name in self.dbinfo:
            info[field_name] = getattr(self, field_name)
        return info

    def register_client_dns(self):
      self.target_type = "http"
      self.register_options([
        BaseOption(name="RHOST", required=True, description="remote host",value=""),
        BaseOption(name="RPORT", required=True, description="port to connect",value=80),
        BaseOption(name='VHOST', required=False, description= "HTTP server virtual host" ),
        BaseOption(name='SSL', required=False, description='Negotiate SSL/TLS for outgoing connections',value=False),
        BaseOption(name="Proxies",required=True, description="proxy to connections"),
        BaseOption(name='UserAgent', required=False, description='The User-Agent header to use for all requests',),
        # Rex::Proto::Http::Client::DefaultUserAgent
        BaseOption(name='HttpUsername', required=False, description='The HTTP username to specify for authentication', value=''),
        BaseOption(name='HttpPassword', required=False, description='The HTTP password to specify for authentication', value=''),
        BaseOption(name='HttpRawHeaders', required=False, description='Path to ERB-templatized raw headers to append to existing headers'),
        BaseOption(name='DigestAuthIIS', required=False, description='Conform to IIS, should work for most servers. Only set to false for non-IIS servers', value=True),
        BaseOption(name="SSLVersion", required=True, description="ssl version"),
        BaseOption(name='FingerprintCheck', required=False, description='Conduct a pre-exploit fingerprint verification', value=True),
        BaseOption(name='DOMAIN', required=True, description='The domain to use for windows authentification', value='WORKSTATION'),
        BaseOption(name='HttpClientTimeout', required=False, description='HTTP connection and receive timeout'),
        BaseOption(name='HttpTrace', required=False, description='Show the raw HTTP requests and responses', value=False),
        BaseOption(name='HTTP::uri_encode_mode', required=False, description='Enable URI encoding'),
        #['none', 'hex-normal', 'hex-noslashes', 'hex-random', 'hex-all', 'u-normal', 'u-all', 'u-random']
        BaseOption(name='HTTP::uri_full_url', required=False, description='Use the full URL for all HTTP requests', value=False),
        BaseOption(name='HTTP::pad_method_uri_count', required=False, description='How many whitespace characters to use between the method and uri', value=1),
        BaseOption(name='HTTP::pad_uri_version_count', required=False, description='How many whitespace characters to use between the uri and version', value=1),
        BaseOption(name='HTTP::pad_method_uri_type', required=False, description='What type of whitespace to use between the method and uri',),
        #'space', ['space', 'tab', 'apache']]),
        BaseOption(name='HTTP::pad_uri_version_type', required=False, description='What type of whitespace to use between the uri and version'),
        #'space', ['space', 'tab', 'apache']]),
        BaseOption(name='HTTP::method_random_valid', required=False, description='Use a random, but valid, HTTP method for request', value=False),
        BaseOption(name='HTTP::method_random_invalid', required=False, description='Use a random invalid, HTTP method for request', value=False),
        BaseOption(name='HTTP::method_random_case', required=False, description='Use random casing for the HTTP method', value=False),
        BaseOption(name='HTTP::version_random_valid', required=False, description='Use a random, but valid, HTTP version for request', value=False),
        BaseOption(name='HTTP::version_random_invalid', required=False, description='Use a random invalid, HTTP version for request', value=False),
        BaseOption(name='HTTP::uri_dir_self_reference', required=False, description='Insert self-referential directories into the uri', value=False),
        BaseOption(name='HTTP::uri_dir_fake_relative', required=False, description='Insert fake relative directories into the uri',value=False),
        BaseOption(name='HTTP::uri_use_backslashes', required=False, description='Use back slashes instead of forward slashes in the uri ', value=False),
        BaseOption(name='HTTP::pad_fake_headers', required=False, description='Insert random, fake headers into the HTTP request', value=False),
        BaseOption(name='HTTP::pad_fake_headers_count', required=False, description='How many fake headers to insert into the HTTP request', value=0),
        BaseOption(name='HTTP::pad_get_params', required=False, description='Insert random, fake query string variables into the request', value=False),
        BaseOption(name='HTTP::pad_get_params_count', required=False, description='How many fake query string variables to insert into the request', value=16),
        BaseOption(name='HTTP::pad_post_params', required=False, description='Insert random, fake post variables into the request',value=False),
        BaseOption(name='HTTP::pad_post_params_count', required=False, description='How many fake post variables to insert into the request', value=16),
        BaseOption(name='HTTP::uri_fake_end', required=False, description='Add a fake end of URI (eg: /%20HTTP/1.0/../../)', value=False),
        BaseOption(name='HTTP::uri_fake_params_start', required=False, description='Add a fake start of params to the URI (eg: /%3fa=b/../)', value=False),
        BaseOption(name='HTTP::header_folding', required=False, description='Enable folding of HTTP headers', value=False)
  ])

    def thg_update_info(self, info):
        for name in info:
            if name in self.dbinfo:
                setattr(self, name, info[name])

    def register_options(self, option_array):
        for option in option_array:
            self.options.add_option(option)

    def get_missing_options(self):
        def is_missing(option):
            return option.required and option.value in [None, '']

        missing_options = filter(is_missing, self.options.get_options())
        return list(missing_options)


